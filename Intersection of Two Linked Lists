// 3 approaches

//1st approach 
//hashmap 
class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        unordered_map<ListNode*,int> map;
        
        while(headA){
            map[headA]++;
            headA=headA->next;
        }
        
        while(headB){
            if(map[headB]>0){
                return headB;
            }
            headB=headB->next;
        }
        
        return NULL;
    }
};

//2nd approach
//length difference
class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        int n=0;
        int m=0;
        
        ListNode* temp1=headA;
        ListNode* temp2=headB;

        while(temp1){
            n++;
            temp1=temp1->next;
        }
        
        while(temp2){
            m++;
            temp2=temp2->next;
        }
        
        int t=abs(m-n);
        if(n>m){
            while(t--){
            headA=headA->next;
            
        }
        }
        else{
            while(t--){
            
            headB=headB->next;
        }
        }
        
        
        while(headA!=NULL && headB!=NULL){
            if(headA==headB){
                return headA;
            }
            headA=headA->next;
            headB=headB->next;
        }
        return NULL;
    }
};


//3rd approach
//two pointers
//intution-->length diff only
class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        ListNode* ptr1=headA;
        ListNode* ptr2=headB;
        
        while(ptr1!=ptr2){
            if(ptr1==NULL){
                ptr1=headB;
            }
            else{
                ptr1=ptr1->next;
            }
            if(ptr2==NULL){
                ptr2=headA;
            }
            else{
                ptr2=ptr2->next;
            }
        }
        return ptr1;
    }
};
