class Solution{
  public:
    //Function to sort the given linked list using Merge Sort.
     Node* findMid(Node *&head){
       
       Node *fast = head->next;
       Node*slow = head;
   
   while(fast!=NULL && fast->next !=NULL){
       fast = fast->next->next;
       slow = slow->next;
   }
   return slow;
   }
   
   Node* merge(Node* left,Node *right){
       Node* dummy=new Node(-1);
       Node* head1=left;
       Node *head2=right;
       Node* res = dummy;
       while(head1!=NULL && head2!=NULL){
           if(head1->data >= head2->data){
               res->next = head2;
               res = res->next;
               head2 = head2->next;
           }
           else{
               res->next = head1;
               res = res->next;
               head1= head1->next;
           }
       }
       
       if(head1!=NULL){
           res->next = head1;
       }
       if(head2!=NULL){
           res->next = head2;
       }
       
       return dummy->next;
   }
   
    Node* mergeSort(Node* head) {
        // your code here
         if(head==NULL || head->next ==NULL){
       return head;
   }
   
       Node *mid = findMid(head);
      Node* left = head;
      Node* right = mid->next;
       mid->next = NULL;
       
       left = mergeSort(left);
       right = mergeSort(right);
       
       Node*res = merge(left,right);
       
       return res;
    }
};
