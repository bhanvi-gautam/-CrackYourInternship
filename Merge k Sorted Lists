/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
struct compare {
    bool operator() (ListNode* a, ListNode* b){
        return (a->val) > (b->val);
    }
};

class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        priority_queue <ListNode*, vector<ListNode*>,compare > pq;//cant use int because we are comparing pointers here	
       for(int i=0;i<lists.size();i++){
           if(lists[i])
               pq.push(lists[i]);
       }
        if(pq.empty())
            return nullptr;
        
         //result is always outside of the priority queue: 
        //to start from head pop first element add from top of the priority queue
        ListNode* result = pq.top();
        pq.pop();
        
        ListNode* newhead=result;
        if(result->next)
            pq.push(result->next);
        
        while(!pq.empty()){
           result->next = pq.top();//pushing value
            pq.pop();
            result = result->next;
            
            if(result->next) pq.push(result->next);  //pushing address 
        }
        return newhead;
    }
};
