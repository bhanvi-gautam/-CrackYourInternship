class Solution {
public:
    void dfs( vector<vector<int>>& adj,vector<bool> &visited,int src){
        visited[src]=true;
        for(int i: adj[src])
            if(!visited[i])
                dfs(adj,visited,i);
    }
    
    int makeConnected(int n, vector<vector<int>>& connections) {
        if(n-1>connections.size()){
            return -1;
        }
        // One trick is that, if we have enough cables,
        // we don't need to worry about where we can get the cable from.
        
        // We only need to count the number of connected networks.
        // To connect two unconneccted networks, we need to set one cable.
        
        // The number of operations we need = the number of connected networks - 1
        
        vector<vector<int>> adj(n);
        
        for(auto v:connections){
            adj[v[0]].push_back(v[1]);
            adj[v[1]].push_back(v[0]);
        }
        vector<bool>visited(n,false);
        
        int components=0;
        for(int i=0;i<n;i++){
            if(!visited[i]){
                dfs(adj,visited,i);
                components++;
            }
        }
        return components-1;
        
        
    }
};
