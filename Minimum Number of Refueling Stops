class Solution {
public:
    int minRefuelStops(int target, int startFuel, vector<vector<int>>& stations) {
        // the max distance only depends on the amount of fuel at each station
         // we should choose the largest amount of fuel each time
        if(startFuel>=target){
            return 0;
        }
        priority_queue<int> pq;
        int i=0,n=stations.size(),stops=0,maxDist=startFuel;
        
        while(maxDist<target){
            while(i<n && stations[i][0]<=maxDist){
                pq.push(stations[i][1]);
                i++;
            }
            if(pq.empty()){
                return -1;
            }
            
            maxDist+=pq.top();
            pq.pop();
            stops++;
        }
        return stops;
    }
};
