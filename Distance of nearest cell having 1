	vector<vector<int>>nearest(vector<vector<int>>grid)
	{
	    // Code here
	    int n=grid.size();
	    int m=grid[0].size();
	    
	    queue<pair<int,int>>q;
	    vector<vector<int>>dp(n,vector<int>(m,INT_MAX));
	    
	    for(int i=0;i<n;i++){
	        for(int j=0;j<m;j++){
	             if(grid[i][j]==1){
                 q.push({i,j});
                 dp[i][j]=0;
	             }
	        }
	    }
	    while(!q.empty()){
	        int sz=q.size();
	        while(sz--){
	            pair<int,int>p=q.front();
	            q.pop();
	            int i=p.first;
	            int j=p.second;
	            
	            if(i-1>=0 && grid[i-1][j]==0 && dp[i-1][j]>1+dp[i][j]){
	                 if(dp[i-1][j]==INT_MAX)
                    q.push({i-1,j});
                 dp[i-1][j]=1+dp[i][j];
	            }
	            if(i+1<n&&grid[i+1][j]==0&&dp[i+1][j]>1+dp[i][j]){
                    if(dp[i+1][j]==INT_MAX)
                       q.push({i+1,j});
                 dp[i+1][j]=1+dp[i][j];
             }
               if(j-1>=0&&grid[i][j-1]==0&&dp[i][j-1]>1+dp[i][j]){
                      if(dp[i][j-1]==INT_MAX)
                            q.push({i,j-1});
                dp[i][j-1]=1+dp[i][j];
             }
               if(j+1<m&&grid[i][j+1]==0&&dp[i][j+1]>1+dp[i][j]){
                      if(dp[i][j+1]==INT_MAX)
                           q.push({i,j+1});
                dp[i][j+1]=1+dp[i][j];
             }
	        }
	    }
	    return dp;
	}
	
};
